class Solution {
    int count = 0;
    public int totalNQueens(int n) {
        char[][] board = new char[n][n];
        helper(board,0,n);
        return count;
    }
    public boolean isSafe(char[][] board,int row,int col)
	{
		for(int i=0;i<board.length;i++)
		{
			if(board[row][i]=='Q')
				return false;
		}

		for(int i=0;i<board.length;i++)
		{
			if(board[i][col]=='Q')
				return false;
		}

		for(int i=row,j=col;i>=0 && j>=0;i--,j--)
		{
			if(board[i][j]=='Q')
				return false;
		}

		for(int i=row,j=col;i>=0 && j<board.length;i--,j++)
		{
			if(board[i][j]=='Q')
				return false;
		}

		for(int i=row,j=col;i<board.length && j>=0;i++,j--)
		{
			if(board[i][j]=='Q')
				return false;
		}

		for(int i=row,j=col;i<board.length && j<board.length;i++,j++)
		{
			if(board[i][j]=='Q')
				return false;
		}
		
		return true;
	}
    
    public void helper(char[][] board,int col,int row )
	{
		for(int i=0;i<row;i++)
		{
			if(col==row)	
			{
                count++;
                return;
			}
			if(isSafe(board,i,col))
			{
				board[i][col] = 'Q';
				helper(board,col+1,row);	
				board[i][col] = ' ';
			}
		}
	}
}
