class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null) return root;
        if (root.val == key) return getNode(root);

        TreeNode curr = root;

        while (root != null) {
            if (root.val > key) {
                if (root.left != null && root.left.val == key) {
                    root.left = getNode(root.left);
                    break;
                } else {
                    root = root.left;
                }
            } else {
                if (root.right != null && root.right.val == key) {
                    root.right = getNode(root.right);
                    break;
                } else {
                    root = root.right;
                }
            }
        }
        return curr;
    }

    public TreeNode getNode(TreeNode root) {
        if (root.left == null) {
            return root.right;
        }
        if (root.right == null) {
            return root.left;
        }

        TreeNode rightChild = root.right;
        TreeNode lastRight = getRightmostOfLeft(root.left);
        lastRight.right = rightChild;

        return root.left;
    }

    public TreeNode getRightmostOfLeft(TreeNode root) {
        if (root.right == null) {
            return root;
        }
        return getRightmostOfLeft(root.right);
    }
};
