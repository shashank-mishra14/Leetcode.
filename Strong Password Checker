class Solution {
    public int strongPasswordChecker(String password) {
        int len = password.length();
        int rule1 = 0; // Steps to fix length problem.
        if (len < 6) rule1 = 6 - len;
        else if (len > 20) rule1 = len - 20;

        // 1 step each to have lowercase, uppercase and digit.
        int[] rule2Steps = {1, 1, 1};

        // We need to know 3-repeat, 4-repeat, 5-repeat. 6-repeat is just
        // 3-repeat + 5-repeat and so on.
        int repeat3 = 0, repeat4 = 0, repeat5 = 0;
        int repeatCounter = 0;
        for (int i = 0; i < len; i++) {
            char c = password.charAt(i);
            solveRule2(c, rule2Steps);
            if (i > 0 && password.charAt(i - 1) == c) {
                repeatCounter++;
                if (repeatCounter == 3) repeat3++;
                if (repeatCounter == 4) {
                    repeat4++;
                    repeat3--;
                }
                if (repeatCounter == 5) {
                    repeat5++;
                    repeat4--;
                    repeatCounter = 2;
                }
            } else { // clear the repeatCounter to 1 when a different char met.
                repeatCounter = 1;
            }
        }
        int rule2 = rule2Steps[0] + rule2Steps[1] + rule2Steps[2];

        // Calculate the result based on counters.
        // Operations: add, replace for rule2, replace for breaking 3 repeatings
        // any of the 3 operations can substitute any other 2 operations.
        if (len <= 20) return Math.max(Math.max(rule1, rule2), 
                                       repeat3 + repeat4 + repeat5);
        
        // When len > 20, Operations are:
        // 1. delete, 2. replace for rule2, 3. replace for breaking 3 repeatings
        // #1 & #2 can never substitute each other.
        // #3 has 2 substitute options:
        // 1. substitute 1 #3 with 
        //      1 del (max repeat3 times)
        //      2 del (max repeat4 times)
        //      3 del (max repeat5 times)
        //    Greedy works, there is no harm to substitute with cheaper price.
        // 2. substitute 1 #3 with 1 # 2, like when len <= 20
        // substitute #3 with #2 first since it's cheapest.
        int sub = rule2;
        int[] repeats = {repeat3, repeat4, repeat5};
        for (int i = 2; i >= 0; i--) {
            int delta = Math.min(repeats[i], sub);
            repeats[i] -= delta;
            sub -= delta;
        }
        // substitute #3 with 1 del, 2 del then 3 del
        sub = rule1;
        for (int i = 0; i < 3; i++) {
            int delta = Math.min(repeats[i], sub / (i + 1));
            repeats[i] -= delta;
            sub -= (i + 1) * delta;
        }
        return rule1 + rule2 + repeats[0] + repeats[1] + repeats[2];
    }

    // A helper function to judge rule2. The array 0 - 2 presents for steps
    // needed to have a lowercase, uppercase and a digit. Intial value is 1.
    private void solveRule2(char c, int[] rule2Steps) {
        if (c >= 'a' && c <= 'z') rule2Steps[0] = 0;
        if (c >= 'A' && c <= 'Z') rule2Steps[1] = 0;
        if (c >= '0' && c <= '9') rule2Steps[2] = 0;
    }
}
