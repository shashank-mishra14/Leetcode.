class Solution {
  public List<List<Integer>> subsetsWithDup(int[] nums) {
    Arrays.sort(nums);
    List<Integer> tmp = new ArrayList();
    List<List<Integer>> result = new ArrayList();
    for (int i = 0; i <= nums.length; i ++) {
      backTracking(nums, 0, i, tmp, result);
    }
    return result;
  }

  private void backTracking(int[] nums, int start, int size, List<Integer> tmp, List<List<Integer>> result) {
    if (size < 0) {
      return;
    } else if (size == 0) {
      result.add(new ArrayList(tmp));
    } else {
      for (int i = start; i + size <= nums.length; i ++) {
        tmp.add(nums[i]);
        backTracking(nums, i + 1, size - 1, tmp, result);
        while (i + 1 < nums.length && nums[i] == nums[i + 1]) i ++;
        tmp.remove(tmp.size() - 1);
      }
    }
  }
}
